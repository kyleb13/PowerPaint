/*
 * TCSS 305, Spring 2017 
 */
package gui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Enumeration;
import javax.swing.AbstractAction;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.JRadioButton;
import model.DrawCircle;
import model.DrawEllipse;
import model.DrawEraser;
import model.DrawLine;
import model.DrawPencil;
import model.DrawRectangle;
import model.DrawSquare;

/**
 * The Action for the tool buttons on the toolbar and menu bar.
 * @author Kyle Beveridge
 * @version 5/16/18
 *
 */
public class ButtonAction extends AbstractAction {
    
    /**
     * Auto-generated serialization uid.  
     */
    private static final long serialVersionUID = 2138173539270796768L;
    /**
     * The main drawing panel.
     */
    private final DrawPanel myPanel;
    
    /**
     * Button group for the Toolbar buttons.
     */
    private ButtonGroup myFirst;
    
    /**
     * The menu bar buttons.
     */
    private JRadioButton[] mySecond;
    
    /**
     * String indicating the tool that is being used.
     */
    private String myEnabled = "";
    
    /**
     * Set up the Button Action object.
     * @param p1 .
     */
    public ButtonAction(final DrawPanel p1) {
        super();
        myPanel = p1;
        myFirst = new ButtonGroup();
        mySecond = new JRadioButton[2 * 2 * 2 + 1];
    }
    
    /**
     * Set the first button group.
     * @param b1 the group.
     */
    public void setGroup1(final ButtonGroup b1) {
        myFirst = b1;
    }

    /**
     * Sets the second group of buttons.
     * @param b2 the second group.
     */
    public void setGroup2(final JRadioButton[] b2) {
        mySecond = b2.clone();
    }
    
    /**
     * Synchronizes button selection between tool and menu buttons.
     */
    private void setEnabledButtons() {
        final Enumeration<AbstractButton> e1 = myFirst.getElements();
        for (final AbstractButton a: mySecond) {
            final AbstractButton current = e1.nextElement();
            if (a.getText().equals(myEnabled)) {
                current.setSelected(true);
                a.setSelected(true);
                break;
            }
        }
    }
    
    @Override
    public void actionPerformed(final ActionEvent arg0) {
        
    }
    
    /**
     * Inner Class that deals with the Pencil Tool.
     * @author Kyle Beveridge
     */
    class PencilAction extends AbstractAction { 

        /**
         * Autogenerated serialization uid.
         */
        private static final long serialVersionUID = 1L;
        
        /**
         * Construct the action.
         * @param name1 Name of the Buttons.
         * @param theIcon Icon to be used.
         */
        PencilAction(final String name1, final Icon theIcon) {
            super(name1, theIcon);
            putValue(Action.MNEMONIC_KEY, KeyEvent.VK_P);
        }

        @Override
        public void actionPerformed(final ActionEvent e1) {
            myPanel.setShape(new DrawPencil());
            myEnabled = "Pencil";
            setEnabledButtons();
        }
        
    }
    
    /**
     * Inner Class that deals with the Line Tool.
     * @author Kyle Beveridge
     */
    class LineAction extends AbstractAction {

        /**
         * Autogenerated serialization uid.
         */
        private static final long serialVersionUID = 1L;
        
        /**
         * Construct the action.
         * @param name1 Name of the Buttons.
         * @param theIcon Icon to be used.
         */
        LineAction(final String name1, final Icon theIcon) {
            super(name1, theIcon);
            putValue(Action.MNEMONIC_KEY, KeyEvent.VK_L);
        }

        @Override
        public void actionPerformed(final ActionEvent e1) {
            myPanel.setShape(new DrawLine());
            myEnabled = "Line";
            setEnabledButtons();
        }
        
    }
    
    /**
     * Inner Class that deals with the Rectangle Tool.
     * @author Kyle Beveridge
     */
    class RectangleAction extends AbstractAction {

        /**
         * Autogenerated serialization uid.
         */
        private static final long serialVersionUID = 1L;
        /**
         * Construct the action.
         * @param name1 Name of the Buttons.
         * @param theIcon Icon to be used.
         */
        RectangleAction(final String name1, final Icon theIcon) {
            super(name1, theIcon);
            putValue(Action.MNEMONIC_KEY, KeyEvent.VK_R);
        }

        @Override
        public void actionPerformed(final ActionEvent e1) {
            myPanel.setShape(new DrawRectangle());
            myEnabled = "Rectangle";
            setEnabledButtons();
        }
        
    }
    
    /**
     * Inner Class that deals with the Square Tool.
     * @author Kyle Beveridge
     */
    class SquareAction extends AbstractAction {

        /**
         * Autogenerated serialization uid.
         */
        private static final long serialVersionUID = 1L;
        
        /**
         * Construct the action.
         * @param name1 Name of the Buttons.
         * @param theIcon Icon to be used.
         */
        SquareAction(final String name1, final Icon theIcon) {
            super(name1, theIcon);
            putValue(Action.MNEMONIC_KEY, KeyEvent.VK_S);
        }

        @Override
        public void actionPerformed(final ActionEvent e1) {
            myPanel.setShape(new DrawSquare());
            myEnabled = "Square";
            setEnabledButtons();
        }
        
    }
    
    /**
     * Inner Class that deals with the Ellipse Tool.
     * @author Kyle Beveridge
     */
    class EllipseAction extends AbstractAction {

        /**
         * Autogenerated serialization uid.
         */
        private static final long serialVersionUID = 1L;
        
        /**
         * Construct the action.
         * @param name1 Name of the Buttons.
         * @param theIcon Icon to be used.
         */
        EllipseAction(final String name1, final Icon theIcon) {
            super(name1, theIcon);
            putValue(Action.MNEMONIC_KEY, KeyEvent.VK_E);
        }

        @Override
        public void actionPerformed(final ActionEvent e1) {
            myPanel.setShape(new DrawEllipse());
            myEnabled = "Ellipse";
            setEnabledButtons();
        }
        
    }
    
    /**
     * Inner Class that deals with the Circle Tool.
     * @author Kyle Beveridge
     */
    class CircleAction extends AbstractAction {

        /**
         * Autogenerated serialization uid.
         */
        private static final long serialVersionUID = 1L;
        
        /**
         * Construct the action.
         * @param name1 Name of the Buttons.
         * @param theIcon Icon to be used.
         */
        CircleAction(final String name1, final Icon theIcon) {
            super(name1, theIcon);
            putValue(Action.MNEMONIC_KEY, KeyEvent.VK_C);
        }

        @Override
        public void actionPerformed(final ActionEvent e1) {
            myPanel.setShape(new DrawCircle());
            myEnabled = "Circle";
            setEnabledButtons();
        }
        
    }
    
    /**
     * Inner Class that deals with the Eraser Tool.
     * @author Kyle Beveridge
     */
    class EraserAction extends AbstractAction {

        /**
         * Autogenerated serialization uid.
         */
        private static final long serialVersionUID = 1L;
        
        /**
         * Construct the action.
         * @param name1 Name of the Buttons.
         * @param theIcon Icon to be used.
         */
        EraserAction(final String name1, final Icon theIcon) {
            super(name1, theIcon);
            putValue(Action.MNEMONIC_KEY, KeyEvent.VK_A);
        }

        @Override
        public void actionPerformed(final ActionEvent e1) {
            myPanel.setShape(new DrawEraser());
            myEnabled = "Eraser";
            setEnabledButtons();
        }
        
    }

}
